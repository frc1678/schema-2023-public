# Used for calculating objective team in match data in Server
#
# Example:
#
# {'confidence_rating': 86,
# 'match_number': 8,
# 'team_number': '79',
# 'auto_cube_low': 3,
# 'auto_cube_mid': 3,
# 'auto_cube_high': 3,
# 'auto_cone_low': 3,
# 'auto_cone_mid': 3,
# 'auto_cone_high': 3,
# 'tele_cube_low': 3,
# 'tele_cube_mid': 3,
# 'tele_cube_high': 3,
# 'tele_cone_low': 3,
# 'tele_cone_mid': 3,
# 'tele_cone_high': 3,
# 'intakes_ground': 20,
# 'intakes_other': 20,
# 'auto_total_cubes': 9,
# 'auto_total_cones': 9,
# 'auto_total_gamepieces': 18,
# 'tele_total_cubes': 9,
# 'tele_total_cones': 9,
# 'tele_total_gamepieces': 18,
# 'incap': 10,
# 'auto_charge_level': 'ENGAGE',
# 'tele_charge_level': 'PARK'
# 'start_position': 'ONE'}
#


# Contains information about this schema file
schema_file:
  # Version of schema file
  # Incremented every merged schema change
  version: 8

# Data that doesn't fit into other categorical calculations
data:
  confidence_rating:
    type: int
  team_number:
    type: str
  match_number:
    type: int

# Calculations built around counting timeline actions with certain key:value pairs
timeline_counts:
  auto_cube_low:
    type: int
    action_type: score_cube_low
    in_teleop: false
  auto_cube_mid:
    type: int
    action_type: score_cube_mid
    in_teleop: false
  auto_cube_high:
    type: int
    action_type: score_cube_high
    in_teleop: false
  auto_cone_low:
    type: int
    action_type: score_cone_low
    in_teleop: false
  auto_cone_mid:
    type: int
    action_type: score_cone_mid
    in_teleop: false
  auto_cone_high:
    type: int
    action_type: score_cone_high
    in_teleop: false
  auto_charge_attempt:
    type: int
    action_type: charge_attempt
    in_teleop: false
  tele_cube_low:
    type: int
    action_type: score_cube_low
    in_teleop: true
  tele_cube_mid:
    type: int
    action_type: score_cube_mid
    in_teleop: true
  tele_cube_high:
    type: int
    action_type: score_cube_high
    in_teleop: true
  tele_cone_low:
    type: int
    action_type: score_cone_low
    in_teleop: true
  tele_cone_mid:
    type: int
    action_type: score_cone_mid
    in_teleop: true
  tele_cone_high:
    type: int
    action_type: score_cone_high
    in_teleop: true
  tele_charge_attempt:
    type: int
    action_type: charge_attempt
    in_teleop: true
  intakes_ground:
    type: int
    action_type: intake_ground
  intakes_station:
    type: int
    action_type: intake_station
  intakes_low_row:
    type: int
    action_type: intake_low_row

# Calculations made by adding up other counts
aggregates:
  auto_total_cubes:
    type: int
    counts: [auto_cube_low, auto_cube_mid, auto_cube_high]
  auto_total_cones:
    type: int
    counts: [auto_cone_low, auto_cone_mid, auto_cone_high]
  auto_total_gamepieces:
    type: int
    counts: [auto_total_cubes, auto_total_cones]
  tele_total_cubes:
    type: int
    counts: [tele_cube_low, tele_cube_mid, tele_cube_high]
  tele_total_cones:
    type: int
    counts: [tele_cone_low, tele_cone_mid, tele_cone_high]
  tele_total_gamepieces:
    type: int
    counts: [tele_total_cubes, tele_total_cones]
  total_intakes:
    type: int
    counts: [intakes_low_node, intakes_station, intakes_ground]
  total_charge_attempts:
    type: int
    counts: [tele_charge_attempt, auto_charge_attempt]
  tele_total_gamepiece_low:
    type: int
    counts: [tele_cube_low, tele_cone_low]

# Calculations built around measuring the time between two timeline actions.
# First item in each list is the start item key:value pair requirements, second item is the end item.
timeline_cycle_time:
  incap:
    type: int
    start_action: start_incap
    end_action: end_incap
    minimum_time: 8


# Robot actions which are one out of a dict of possible actions
# Dict items should be ordered, keys are shortened string
categorical_actions:
  auto_charge_level:
    type: Enum[str]
  tele_charge_level:
    type: Enum[str]
  start_position:
    type: Enum[int]
  preloaded_gamepiece:
    type: Enum[str]

enums:
  auto_charge_level:
    NONE: "N"
    DOCK: D
    ENGAGE: E
  tele_charge_level:
    NONE: "N"
    PARK: P
    DOCK: D
    ENGAGE: E
  start_position:
    ZERO: 0
    ONE: 1
    TWO: 2
    THREE: 3
    FOUR: 4
  preloaded_gamepiece:
    CUBE: B
    CONE: "N"
