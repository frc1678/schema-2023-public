# Used for calculating objective team in match data in Server
#
# Example:
#
# {'confidence_rating': 86,
# 'match_number': 8,
# 'team_number': '79',
# 'auto_high_balls': 3,
# 'auto_low_balls': 3,
# 'tele_high_balls': 3,
# 'tele_low_balls': 3,
# 'auto_high_balls': 67,
# 'tele_high_balls': 97,
# 'incap': 8,
# 'climb_level': 'TRAVERSAL',
# 'start_position': 'ONE'}
#


# Contains information about this schema file
schema_file:
  # Version of schema file
  # Incremented every merged schema change
  version: 7

# Data that doesn't fit into other categorical calculations
data:
  confidence_rating:
    type: int
  team_number:
    type: str
  match_number:
    type: int

# Calculations built around counting timeline actions with certain key:value pairs
timeline_counts:
  auto_high_balls:
    type: int
    action_type: score_ball_high
    time: [135, 150]
  auto_low_balls:
    type: int
    action_type: score_ball_low
    time: [135, 150]
  tele_high_balls:
    type: int
    action_type: score_ball_high
    time: [0, 134]
  tele_low_balls:
    type: int
    action_type: score_ball_low
    time: [0, 134]
  intakes:
    type: int
    action_type: intake
    time: [0, 150]
  climb_attempts:
    type: int
    action_type: climb_attempt
    time: [0, 150]

# Calculations made by adding up other counts
aggregates:
  auto_total_balls:
    type: int
    counts: [auto_low_balls, auto_high_balls]
  tele_total_balls:
    type: int
    counts: [tele_low_balls, tele_high_balls]


# Calculations built around measuring the time between two timeline actions.
# First item in each list is the start item key:value pair requirements, second item is the end item.
timeline_cycle_time:
  incap:
    type: int
    start_action: start_incap
    end_action: end_incap
    minimum_time: 8


# Robot actions which are one out of a list of possible actions
categorical_actions:
  climb_level:
    type: str
  start_position:
    type: str
