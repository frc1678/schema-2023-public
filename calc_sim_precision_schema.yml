# Schema for scout precisions in individual matches
#
# Example:
#
# {
#     "scout_name": "Joe",
#     "match_number": 8,
#     "team_number": "1928",
#     "alliance_color_is_red": true,
#     "sim_precision": 6.5321
# }
#


# Contains information about this schema file
schema_file:
  # Version of schema file
  # Incremented every merged schema change
  version: 3

# TODO: Add collection information to data fields once schema is implemented
# Non-calculated data
data:
  scout_name:
    type: str
  match_number:
    type: int
  team_number:
    type: str
  alliance_color_is_red:
    type: bool

# our_data: {weight: value of our_data, calculation: how to get our_data for entire alliance from tba}  
calculations:
  sim_precision:
    type: float
    requires:
      unconsolidated_totals.auto_cube_high:
        weight: 6
        calculation: ["autoCommunity", "T", +6*count=Cube]
      unconsolidated_totals.auto_cube_mid:
        weight: 4
        calculation: ["autoCommunity", "M", +4*count=Cube]
      unconsolidated_totals.auto_cube_low:
        weight: 3
        calculation: ["autoCommunity", "B", +3*count=Cube]
      unconsolidated_totals.tele_cube_high:
        weight: 5
        calculation: [["autoCommunity", "T", -5*count=Cube], ["teleopCommunity", "T", +5*count=Cube]]
      unconsolidated_totals.tele_cube_mid:
        weight: 3
        calculation: [["autoCommunity", "M", -3*count=Cube], ["teleopCommunity", "M", +3*count=Cube]]
      unconsolidated_totals.tele_cube_low:
        weight: 2
        calculation: [["autoCommunity", "B", -2*count=Cube], ["teleopCommunity", "B", +2*count=Cube]]
      unconsolidated_totals.auto_cone_high:
        weight: 6
        calculation: ["autoCommunity", "T", +6*count=Cone]
      unconsolidated_totals.auto_cone_mid:
        weight: 4
        calculation: ["autoCommunity", "M", +4*count=Cone]
      unconsolidated_totals.auto_cone_low:
        weight: 3
        calculation: ["autoCommunity", "B", +3*count=Cone]
      unconsolidated_totals.tele_cone_high:
        weight: 5
        calculation: [["autoCommunity", "T", -5*count=Cone], ["teleopCommunity", "T", +5*count=Cone]]
      unconsolidated_totals.tele_cone_mid:
        weight: 3
        calculation: [["autoCommunity", "M", -3*count=Cone], ["teleopCommunity", "M", +3*count=Cone]]
      unconsolidated_totals.tele_cone_low:
        weight: 2
        calculation: [["autoCommunity", "B", -2*count=Cone], ["teleopCommunity", "B", +2*count=Cone]]
      unconsolidated_totals.intakes_high_row:
        weight: -5
        calculation: ["-0*constant"]
      unconsolidated_totals.intakes_mid_row:
        weight: -3
        calculation: ["-0*constant"]
      unconsolidated_totals.intakes_low_row:
        weight: -2
        calculation: ["-0*constant"]

  auto_cone_low_precision:
    type: float
    requires:
      unconsolidated_totals.auto_cone_low:
        weight: 1
        calculation: ["autoCommunity", "B", +1*count=Cone]
  tele_cone_low_precision:
    type: float
    requires:
      unconsolidated_totals.tele_cone_low: 
        weight: 1
        calculation: [["teleopCommunity", "B", +1*count=Cone], ["autoCommunity", "B", -1*count=Cone]]
  auto_cone_mid_precision:
    type: float
    requires:
      unconsolidated_totals.auto_cone_mid:
        weight: 1
        calculation: ["autoCommunity", "M", +1*count=Cone]
  tele_cone_mid_precision:
    type: float
    requires:
      unconsolidated_totals.tele_cone_mid: 
        weight: 1
        calculation: [["teleopCommunity", "M", +1*count=Cone], ["autoCommunity", "M", -1*count=Cone]]
  auto_cone_high_precision:
    type: float
    requires:
      unconsolidated_totals.auto_cone_high:
        weight: 1
        calculation: ["autoCommunity", "T", +1*count=Cone]
  tele_cone_high_precision:
    type: float
    requires:
      unconsolidated_totals.tele_cone_high: 
        weight: 1
        calculation: [["teleopCommunity", "T", +1*count=Cone], ["autoCommunity", "T", -1*count=Cone]]
  auto_cube_low_precision:
    type: float
    requires:
      unconsolidated_totals.auto_cube_low:
        weight: 1
        calculation: ["autoCommunity", "B", +1*count=Cube]
  tele_cube_low_precision:
    type: float
    requires:
      unconsolidated_totals.tele_cube_low: 
        weight: 1
        calculation: [["teleopCommunity", "B", +1*count=Cube], ["autoCommunity", "B", -1*count=Cube]]
  auto_cube_mid_precision:
    type: float
    requires:
      unconsolidated_totals.auto_cube_mid:
        weight: 1
        calculation: ["autoCommunity", "M", +1*count=Cube]
  tele_cube_mid_precision:
    type: float
    requires:
      unconsolidated_totals.tele_cube_mid: 
        weight: 1
        calculation: [["teleopCommunity", "M", +1*count=Cube], ["autoCommunity", "M", -1*count=Cube]]
  auto_cube_high_precision:
    type: float
    requires:
      unconsolidated_totals.auto_cube_high:
        weight: 1
        calculation: ["autoCommunity", "T", +1*count=Cube]
  tele_cube_high_precision:
    type: float
    requires:
      unconsolidated_totals.tele_cube_high: 
        weight: 1
        calculation: [["teleopCommunity", "T", +1*count=Cube], ["autoCommunity", "T", -1*count=Cube]]
